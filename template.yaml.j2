AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  Update item fulltext in Elasticsearch when updated in S3 ({{ node_env }})
Resources:
  # Main processor, invoked via S3 event
  FullTextIndexerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: {{ main_function_name }}
      Handler: index.s3
      Runtime: nodejs18.x
      CodeUri: ./
      MemorySize: 128
      Timeout: 10
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FullTextIndexerDeadLetterQueue.Arn
      Policies:
       - S3ReadPolicy:
          BucketName: {{ bucket_name }}
       - VPCAccessPolicy: {}
      Events:
        BucketEvent:
          Type: S3
          Properties:
            Bucket: !Ref FullTextBucket
            Events:
              - 's3:ObjectCreated:*'
              - 's3:ObjectRemoved:*'
      VpcConfig:
        SecurityGroupIds:
          - {{ security_group }}
        SubnetIds: {{ subnet_ids }}
      Environment:
        Variables:
          NODE_ENV: {{ node_env }}
  
  IndexerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FullTextIndexerFunction}
      RetentionInDays: 14
  
  # Dead Letter Queue Processor
  FullTextIndexerDLQProcessorFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: {{ dlq_function_name }}
      Handler: index.dlq
      Runtime: nodejs18.x
      CodeUri: ./
      MemorySize: 128
      Timeout: 60
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt FullTextIndexerDeadLetterQueue.QueueName
        - LambdaInvokePolicy:
            FunctionName: {{ main_function_name }}
      Events:
        ProcessDLQEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      Environment:
        Variables:
          NODE_ENV: {{ node_env }}
  
  # Async re-indexer of libraries deleted from ES
  FullTextReindexerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: {{ reindexer_function_name }}
      Handler: index.reindexLibrary
      Runtime: nodejs18.x
      CodeUri: ./
      MemorySize: 128
      Timeout: 900
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt FullTextIndexerDeadLetterQueue.QueueName
        - S3ReadPolicy:
            BucketName: {{ bucket_name }}
        - Statement:
            - Effect: 'Allow'
              Action:
                - 's3:PutObject'
                - 's3:PutObjectAcl'
                - 's3:DeleteObject'
              Resource: !Sub 'arn:aws:s3:::{{ bucket_name }}/*'
      Environment:
        Variables:
          NODE_ENV: {{ node_env }}
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FullTextReIndexerQueue.Arn
            BatchSize: 1
            FunctionResponseTypes:
              - ReportBatchItemFailures

  ReindexerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FullTextReindexerFunction}
      RetentionInDays: 14

  DLQLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FullTextIndexerDLQProcessorFunction}
      RetentionInDays: 14
  
  # S3 bucket where full text is stored
  FullTextBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: {{ bucket_name }}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
  
  # Dead letter SQS queue, if initial index fails (e.g., if Elasticsearch is down)
  FullTextIndexerDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: {{ dlq_name }}
      MessageRetentionPeriod: 1209600

  # Queue with requests to re-index specific libraries
  FullTextReIndexerQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: {{ reindexer_queue_name }}
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600

Outputs:
  LambdaSecurityGroup:
    Value: {{ security_group }}
    Export:
      Name: {{ main_function_name }}SecurityGroupID
